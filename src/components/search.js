import React,{Component} from 'react';
import { connect } from 'react-redux';
import fecthData from '../Redux/actions/fetchWeatherData';
import { bindActionCreators } from "redux";


// contolled form is a form elemenet whose value is set by the component state not the other way around

class SearchBar extends Component {

    // We are going to get the search value from state rather directly assigning so let's create a constructor function


    constructor(props)
    {
        super(props);
        // component level statte
        this.state = { term: ''}

        // Bound instance => Take a existing function bind it with this class and return the bound instance
        //Bind the context

        this.onInputChange = this.onInputChange.bind(this);
        this.onFormSubmit = this.onFormSubmit.bind(this);
    }


// whenever the keyword 'this' is referred inside a callback function, we will need to bind the context otherwise this will not be unresolved.
onInputChange(event)
{
    console.log(event.target.value);
    this.setState({term: event.target.value})
    //or this.setState({term: event.target.value})
}

onFormSubmit(event) {
        // will prevent the app from reloading
        event.preventDefault();

        this.props.fetchData(this.state.term)
        this.setState({term: ''})

}


    render() {
        return(
            // onFormSubmit is a callback function
          <form onSubmit={this.onFormSubmit} className="input-group">
            <input
               className="form-control"
               placeholder="Check out Weather forecasts in your favourite Cities"
        // as we are assigning value to the state no chenages will happen in the UI as the term value has been set to empty string
              value = {this.state.term}
              onChange ={ this.onInputChange } // no function call here as this is a callback function so double parentheses
        />
            <span className="input-group-btn">
            <button type="submit" className="btn btn-secondary">Search</button>
            </span>
            </form>
        );
    }
}



//Fetch the application state from the store and pass it to Component Props
// function mapStateToProps(state) {
//    searchTerm: state.searchText
// }

// once action is generated by a onChange event, this function will be called and it will bind the action to all the component props and dispatch thr action
//object to be passed by all the middleware and reducers.. and the reducers will change the application state that will trigger the mapstatetoprops and it will
//cause the application container to render the component injecting the new properties in the view
function mapDispatchToProps(dispatch) {
    console.log('Calling dispatch function');
    return bindActionCreators({fetchData: fecthData},dispatch)
}

// we don't care about store state in this component so null

export default connect(null,mapDispatchToProps)(SearchBar);
